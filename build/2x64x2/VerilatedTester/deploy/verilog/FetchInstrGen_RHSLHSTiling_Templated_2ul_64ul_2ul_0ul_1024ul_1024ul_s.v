// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FetchInstrGen_RHSLHSTiling_Templated_2ul_64ul_2ul_0ul_1024ul_1024ul_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_V_TDATA,
        in_V_V_TVALID,
        in_V_V_TREADY,
        out_V_V_TDATA,
        out_V_V_TVALID,
        out_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [207:0] in_V_V_TDATA;
input   in_V_V_TVALID;
output   in_V_V_TREADY;
output  [127:0] out_V_V_TDATA;
output   out_V_V_TVALID;
input   out_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [207:0] in_V_V_0_data_out;
wire    in_V_V_0_vld_in;
wire    in_V_V_0_vld_out;
wire    in_V_V_0_ack_in;
reg    in_V_V_0_ack_out;
reg   [207:0] in_V_V_0_payload_A;
reg   [207:0] in_V_V_0_payload_B;
reg    in_V_V_0_sel_rd;
reg    in_V_V_0_sel_wr;
wire    in_V_V_0_sel;
wire    in_V_V_0_load_A;
wire    in_V_V_0_load_B;
reg   [1:0] in_V_V_0_state;
wire    in_V_V_0_state_cmp_full;
reg   [127:0] out_V_V_1_data_in;
reg   [127:0] out_V_V_1_data_out;
reg    out_V_V_1_vld_in;
wire    out_V_V_1_vld_out;
wire    out_V_V_1_ack_in;
wire    out_V_V_1_ack_out;
reg   [127:0] out_V_V_1_payload_A;
reg   [127:0] out_V_V_1_payload_B;
reg    out_V_V_1_sel_rd;
reg    out_V_V_1_sel_wr;
wire    out_V_V_1_sel;
wire    out_V_V_1_load_A;
wire    out_V_V_1_load_B;
reg   [1:0] out_V_V_1_state;
wire    out_V_V_1_state_cmp_full;
reg    in_V_V_TDATA_blk_n;
reg    out_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state12;
reg   [0:0] icmp_ln89_reg_739;
reg   [0:0] icmp_ln89_1_reg_798;
wire   [0:0] icmp_ln90_fu_605_p2;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln89_fu_396_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire   [15:0] ins_in_tiles_m_fu_251_p1;
reg   [15:0] ins_in_tiles_m_reg_638;
reg    ap_block_state1;
reg   [15:0] fetch_tiles_per_row_V_reg_644;
wire   [15:0] ins_in_tiles_n_fu_265_p4;
reg   [15:0] ins_in_tiles_n_reg_652;
reg   [7:0] fetch_dram_block_count_V_1_reg_658;
reg   [5:0] p_Result_4_i_reg_663;
reg   [15:0] ins_in_base_l_reg_668;
reg   [15:0] ins_in_base_r_reg_673;
reg   [7:0] ins_in_nbufs_fetch_exec_log2_reg_678;
reg   [31:0] ins_in_dram_lhs_reg_684;
reg   [31:0] ins_in_dram_rhs_reg_689;
wire   [31:0] mul_ln86_fu_610_p2;
reg   [31:0] mul_ln86_reg_694;
reg   [11:0] tmp_1_reg_700;
wire   [7:0] fetch_dram_block_count_V_fu_363_p1;
reg   [7:0] fetch_dram_block_count_V_reg_706;
reg    ap_block_state2_io;
wire   [7:0] lmem_num_regions_fu_366_p2;
reg   [7:0] lmem_num_regions_reg_711;
wire   [15:0] lmem_region_size_fu_380_p1;
reg   [15:0] lmem_region_size_reg_717;
wire   [19:0] mul_ln301_fu_616_p2;
reg   [19:0] mul_ln301_reg_723;
wire   [27:0] zext_ln107_1_fu_390_p1;
reg   [27:0] zext_ln107_1_reg_728;
wire   [19:0] mul_ln301_1_fu_622_p2;
reg   [19:0] mul_ln301_1_reg_734;
wire   [27:0] mul_ln107_fu_628_p2;
reg   [27:0] mul_ln107_reg_743;
wire    ap_CS_fsm_state4;
wire   [127:0] p_Result_s_fu_422_p10;
wire   [7:0] select_ln127_fu_457_p3;
reg   [7:0] select_ln127_reg_753;
wire   [15:0] select_ln127_1_fu_465_p3;
reg   [15:0] select_ln127_1_reg_758;
wire   [27:0] mul_ln148_fu_633_p2;
reg   [27:0] mul_ln148_reg_763;
wire    ap_CS_fsm_state9;
wire   [15:0] fetch_bram_addr_base_V_1_fu_477_p2;
reg   [15:0] fetch_bram_addr_base_V_1_reg_768;
wire   [15:0] select_ln168_fu_492_p3;
reg   [15:0] select_ln168_reg_773;
wire   [15:0] select_ln174_fu_530_p3;
reg   [15:0] select_ln174_reg_779;
wire   [15:0] select_ln174_1_fu_538_p3;
reg   [15:0] select_ln174_1_reg_785;
wire   [7:0] select_ln89_fu_552_p3;
reg   [7:0] select_ln89_reg_792;
wire   [0:0] icmp_ln89_1_fu_564_p2;
wire   [15:0] add_ln89_1_fu_569_p2;
reg   [15:0] add_ln89_1_reg_802;
wire   [127:0] p_Result_1_fu_587_p10;
reg   [15:0] n_0_reg2mem_0_reg_119;
reg   [7:0] rmem_region_0_reg2mem_0_reg_131;
reg   [15:0] rmem_region_offset_0_reg2mem_0_reg_142;
reg   [7:0] lmem_region_reg2mem_0_reg_153;
reg   [15:0] lmem_region_offset_0_reg2mem_0_reg_165;
reg   [15:0] m_0_reg2mem_0_reg_177;
reg   [15:0] i_reg2mem_0_reg_189;
reg   [7:0] lmem_region_reg2mem_1_reg_201;
reg   [15:0] lmem_region_offset_0_reg2mem_1_reg_211;
reg   [15:0] n_0_reg2mem_1_reg_221;
reg   [15:0] m_0_reg2mem_1_reg_231;
reg   [15:0] i_reg2mem_1_reg_241;
reg    ap_block_state12;
reg    ap_predicate_op114_write_state12;
reg    ap_predicate_op115_write_state12;
reg    ap_block_state12_io;
wire   [10:0] zext_ln71_fu_371_p1;
wire   [10:0] lshr_ln71_fu_374_p2;
wire   [31:0] shl_ln_fu_405_p3;
wire   [31:0] fetch_dram_base_V_fu_412_p2;
wire   [15:0] fetch_bram_addr_base_V_fu_417_p2;
wire   [7:0] rmem_region_fu_441_p2;
wire   [0:0] icmp_ln127_fu_452_p2;
wire   [15:0] rmem_region_offset_fu_447_p2;
wire   [0:0] icmp_ln168_fu_487_p2;
wire   [15:0] lmem_region_offset_fu_482_p2;
wire   [15:0] m_fu_500_p2;
wire   [15:0] n_fu_511_p2;
wire   [0:0] icmp_ln177_fu_517_p2;
wire   [0:0] icmp_ln174_fu_506_p2;
wire   [15:0] select_ln177_fu_522_p3;
wire   [7:0] add_ln89_fu_546_p2;
wire   [31:0] zext_ln89_fu_560_p1;
wire   [31:0] shl_ln1_fu_575_p3;
wire   [31:0] fetch_dram_base_V_1_fu_582_p2;
wire   [15:0] mul_ln86_fu_610_p0;
wire   [15:0] mul_ln86_fu_610_p1;
wire   [15:0] mul_ln301_fu_616_p0;
wire   [19:0] zext_ln301_1_fu_387_p1;
wire   [15:0] mul_ln301_fu_616_p1;
wire   [15:0] mul_ln301_1_fu_622_p0;
wire   [15:0] mul_ln301_1_fu_622_p1;
wire   [15:0] mul_ln107_fu_628_p0;
wire   [15:0] mul_ln107_fu_628_p1;
wire   [15:0] mul_ln148_fu_633_p0;
wire   [15:0] mul_ln148_fu_633_p1;
reg   [13:0] ap_NS_fsm;
wire   [27:0] mul_ln107_fu_628_p10;
wire   [27:0] mul_ln148_fu_633_p10;
wire   [19:0] mul_ln301_1_fu_622_p10;
wire   [19:0] mul_ln301_fu_616_p10;
wire   [31:0] mul_ln86_fu_610_p00;
wire   [31:0] mul_ln86_fu_610_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 in_V_V_0_sel_rd = 1'b0;
#0 in_V_V_0_sel_wr = 1'b0;
#0 in_V_V_0_state = 2'd0;
#0 out_V_V_1_sel_rd = 1'b0;
#0 out_V_V_1_sel_wr = 1'b0;
#0 out_V_V_1_state = 2'd0;
end

FetchInstrGen_mul_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
FetchInstrGen_mul_mul_16ns_16ns_32_1_1_U1(
    .din0(mul_ln86_fu_610_p0),
    .din1(mul_ln86_fu_610_p1),
    .dout(mul_ln86_fu_610_p2)
);

FetchInstrGen_mul_mul_16ns_16ns_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 20 ))
FetchInstrGen_mul_mul_16ns_16ns_20_1_1_U2(
    .din0(mul_ln301_fu_616_p0),
    .din1(mul_ln301_fu_616_p1),
    .dout(mul_ln301_fu_616_p2)
);

FetchInstrGen_mul_mul_16ns_16ns_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 20 ))
FetchInstrGen_mul_mul_16ns_16ns_20_1_1_U3(
    .din0(mul_ln301_1_fu_622_p0),
    .din1(mul_ln301_1_fu_622_p1),
    .dout(mul_ln301_1_fu_622_p2)
);

FetchInstrGen_mul_mul_16ns_16ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 28 ))
FetchInstrGen_mul_mul_16ns_16ns_28_1_1_U4(
    .din0(mul_ln107_fu_628_p0),
    .din1(mul_ln107_fu_628_p1),
    .dout(mul_ln107_fu_628_p2)
);

FetchInstrGen_mul_mul_16ns_16ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 28 ))
FetchInstrGen_mul_mul_16ns_16ns_28_1_1_U5(
    .din0(mul_ln148_fu_633_p0),
    .din1(mul_ln148_fu_633_p1),
    .dout(mul_ln148_fu_633_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_V_0_ack_out == 1'b1) & (in_V_V_0_vld_out == 1'b1))) begin
            in_V_V_0_sel_rd <= ~in_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_V_0_ack_in == 1'b1) & (in_V_V_0_vld_in == 1'b1))) begin
            in_V_V_0_sel_wr <= ~in_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_V_0_state == 2'd2) & (in_V_V_0_vld_in == 1'b0)) | ((in_V_V_0_state == 2'd3) & (in_V_V_0_vld_in == 1'b0) & (in_V_V_0_ack_out == 1'b1)))) begin
            in_V_V_0_state <= 2'd2;
        end else if ((((in_V_V_0_state == 2'd1) & (in_V_V_0_ack_out == 1'b0)) | ((in_V_V_0_state == 2'd3) & (in_V_V_0_ack_out == 1'b0) & (in_V_V_0_vld_in == 1'b1)))) begin
            in_V_V_0_state <= 2'd1;
        end else if (((~((in_V_V_0_vld_in == 1'b0) & (in_V_V_0_ack_out == 1'b1)) & ~((in_V_V_0_ack_out == 1'b0) & (in_V_V_0_vld_in == 1'b1)) & (in_V_V_0_state == 2'd3)) | ((in_V_V_0_state == 2'd1) & (in_V_V_0_ack_out == 1'b1)) | ((in_V_V_0_state == 2'd2) & (in_V_V_0_vld_in == 1'b1)))) begin
            in_V_V_0_state <= 2'd3;
        end else begin
            in_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_V_1_ack_out == 1'b1) & (out_V_V_1_vld_out == 1'b1))) begin
            out_V_V_1_sel_rd <= ~out_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_V_1_ack_in == 1'b1) & (out_V_V_1_vld_in == 1'b1))) begin
            out_V_V_1_sel_wr <= ~out_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_V_1_state == 2'd2) & (out_V_V_1_vld_in == 1'b0)) | ((out_V_V_1_state == 2'd3) & (out_V_V_1_vld_in == 1'b0) & (out_V_V_1_ack_out == 1'b1)))) begin
            out_V_V_1_state <= 2'd2;
        end else if ((((out_V_V_1_state == 2'd1) & (out_V_V_TREADY == 1'b0)) | ((out_V_V_1_state == 2'd3) & (out_V_V_TREADY == 1'b0) & (out_V_V_1_vld_in == 1'b1)))) begin
            out_V_V_1_state <= 2'd1;
        end else if (((~((out_V_V_1_vld_in == 1'b0) & (out_V_V_1_ack_out == 1'b1)) & ~((out_V_V_TREADY == 1'b0) & (out_V_V_1_vld_in == 1'b1)) & (out_V_V_1_state == 2'd3)) | ((out_V_V_1_state == 2'd1) & (out_V_V_1_ack_out == 1'b1)) | ((out_V_V_1_state == 2'd2) & (out_V_V_1_vld_in == 1'b1)))) begin
            out_V_V_1_state <= 2'd3;
        end else begin
            out_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_ack_in == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            i_reg2mem_0_reg_189 <= add_ln89_1_reg_802;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            i_reg2mem_0_reg_189 <= 16'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_ack_in == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            i_reg2mem_1_reg_241 <= i_reg2mem_0_reg_189;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            i_reg2mem_1_reg_241 <= add_ln89_1_reg_802;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_ack_in == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            lmem_region_offset_0_reg2mem_0_reg_165 <= select_ln168_reg_773;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            lmem_region_offset_0_reg2mem_0_reg_165 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_ack_in == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            lmem_region_offset_0_reg2mem_1_reg_211 <= lmem_region_offset_0_reg2mem_0_reg_165;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            lmem_region_offset_0_reg2mem_1_reg_211 <= select_ln168_reg_773;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_ack_in == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            lmem_region_reg2mem_0_reg_153 <= select_ln89_reg_792;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            lmem_region_reg2mem_0_reg_153 <= 8'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_ack_in == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            lmem_region_reg2mem_1_reg_201 <= lmem_region_reg2mem_0_reg_153;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            lmem_region_reg2mem_1_reg_201 <= select_ln89_reg_792;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_ack_in == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            m_0_reg2mem_0_reg_177 <= select_ln174_1_reg_785;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_0_reg2mem_0_reg_177 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_ack_in == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            m_0_reg2mem_1_reg_231 <= m_0_reg2mem_0_reg_177;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            m_0_reg2mem_1_reg_231 <= select_ln174_1_reg_785;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_ack_in == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            n_0_reg2mem_0_reg_119 <= select_ln174_reg_779;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            n_0_reg2mem_0_reg_119 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_ack_in == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            n_0_reg2mem_1_reg_221 <= n_0_reg2mem_0_reg_119;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            n_0_reg2mem_1_reg_221 <= select_ln174_reg_779;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_ack_in == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            rmem_region_0_reg2mem_0_reg_131 <= select_ln127_reg_753;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            rmem_region_0_reg2mem_0_reg_131 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_ack_in == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            rmem_region_offset_0_reg2mem_0_reg_142 <= select_ln127_1_reg_758;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            rmem_region_offset_0_reg2mem_0_reg_142 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln89_1_reg_802 <= add_ln89_1_fu_569_p2;
        fetch_bram_addr_base_V_1_reg_768 <= fetch_bram_addr_base_V_1_fu_477_p2;
        icmp_ln89_1_reg_798 <= icmp_ln89_1_fu_564_p2;
        mul_ln148_reg_763 <= mul_ln148_fu_633_p2;
        select_ln168_reg_773 <= select_ln168_fu_492_p3;
        select_ln174_1_reg_785 <= select_ln174_1_fu_538_p3;
        select_ln174_reg_779 <= select_ln174_fu_530_p3;
        select_ln89_reg_792 <= select_ln89_fu_552_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_V_V_0_vld_out == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        fetch_dram_block_count_V_1_reg_658 <= {{in_V_V_0_data_out[55:48]}};
        fetch_tiles_per_row_V_reg_644 <= {{in_V_V_0_data_out[31:16]}};
        ins_in_base_l_reg_668 <= {{in_V_V_0_data_out[79:64]}};
        ins_in_base_r_reg_673 <= {{in_V_V_0_data_out[95:80]}};
        ins_in_dram_lhs_reg_684 <= {{in_V_V_0_data_out[143:112]}};
        ins_in_dram_rhs_reg_689 <= {{in_V_V_0_data_out[175:144]}};
        ins_in_nbufs_fetch_exec_log2_reg_678 <= {{in_V_V_0_data_out[111:104]}};
        ins_in_tiles_m_reg_638 <= ins_in_tiles_m_fu_251_p1;
        ins_in_tiles_n_reg_652 <= {{in_V_V_0_data_out[47:32]}};
        mul_ln86_reg_694 <= mul_ln86_fu_610_p2;
        p_Result_4_i_reg_663 <= {{in_V_V_0_data_out[61:56]}};
        tmp_1_reg_700 <= {{in_V_V_0_data_out[27:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        fetch_dram_block_count_V_reg_706[5 : 0] <= fetch_dram_block_count_V_fu_363_p1[5 : 0];
        icmp_ln89_reg_739 <= icmp_ln89_fu_396_p2;
        lmem_num_regions_reg_711 <= lmem_num_regions_fu_366_p2;
        lmem_region_size_reg_717[10 : 0] <= lmem_region_size_fu_380_p1[10 : 0];
        mul_ln301_1_reg_734 <= mul_ln301_1_fu_622_p2;
        mul_ln301_reg_723 <= mul_ln301_fu_616_p2;
        zext_ln107_1_reg_728[15 : 0] <= zext_ln107_1_fu_390_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_V_0_load_A == 1'b1)) begin
        in_V_V_0_payload_A <= in_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_V_0_load_B == 1'b1)) begin
        in_V_V_0_payload_B <= in_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln107_reg_743 <= mul_ln107_fu_628_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_load_A == 1'b1)) begin
        out_V_V_1_payload_A <= out_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_load_B == 1'b1)) begin
        out_V_V_1_payload_B <= out_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (out_V_V_1_ack_in == 1'b1))) begin
        select_ln127_1_reg_758 <= select_ln127_1_fu_465_p3;
        select_ln127_reg_753 <= select_ln127_fu_457_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((out_V_V_1_state == 2'd1) | (1'b1 == ap_block_state12_io) | ((out_V_V_1_state == 2'd3) & (out_V_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state12) & ((icmp_ln89_reg_739 == 1'd1) | (icmp_ln89_1_reg_798 == 1'd0))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_V_V_1_state == 2'd1) | (1'b1 == ap_block_state12_io) | ((out_V_V_1_state == 2'd3) & (out_V_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state12) & ((icmp_ln89_reg_739 == 1'd1) | (icmp_ln89_1_reg_798 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((in_V_V_0_vld_out == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_V_V_0_ack_out = 1'b1;
    end else begin
        in_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_V_V_0_sel == 1'b1)) begin
        in_V_V_0_data_out = in_V_V_0_payload_B;
    end else begin
        in_V_V_0_data_out = in_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        in_V_V_TDATA_blk_n = in_V_V_0_state[1'd0];
    end else begin
        in_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        out_V_V_1_data_in = p_Result_1_fu_587_p10;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        out_V_V_1_data_in = 128'd8;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_V_V_1_data_in = p_Result_s_fu_422_p10;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln89_fu_396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | (~((out_V_V_1_state == 2'd1) | ((out_V_V_1_state == 2'd3) & (out_V_V_TREADY == 1'b0))) & (icmp_ln89_1_reg_798 == 1'd1) & (icmp_ln90_fu_605_p2 == 1'd0) & (icmp_ln89_reg_739 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | (~((out_V_V_1_state == 2'd1) | ((out_V_V_1_state == 2'd3) & (out_V_V_TREADY == 1'b0))) & (icmp_ln90_fu_605_p2 == 1'd1) & (icmp_ln89_1_reg_798 == 1'd1) & (icmp_ln89_reg_739 == 1'd0) & (1'b1 == ap_CS_fsm_state12)))) begin
        out_V_V_1_data_in = 128'd0;
    end else begin
        out_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((out_V_V_1_sel == 1'b1)) begin
        out_V_V_1_data_out = out_V_V_1_payload_B;
    end else begin
        out_V_V_1_data_out = out_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (out_V_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & (out_V_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (out_V_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state6) & (out_V_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & (out_V_V_1_ack_in == 1'b1)) | ((icmp_ln89_fu_396_p2 == 1'd0) & (1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2)) | (~((out_V_V_1_state == 2'd1) | (1'b1 == ap_block_state12_io) | ((out_V_V_1_state == 2'd3) & (out_V_V_TREADY == 1'b0))) & (ap_predicate_op115_write_state12 == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | (~((out_V_V_1_state == 2'd1) | (1'b1 == ap_block_state12_io) | ((out_V_V_1_state == 2'd3) & (out_V_V_TREADY == 1'b0))) & (ap_predicate_op114_write_state12 == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        out_V_V_1_vld_in = 1'b1;
    end else begin
        out_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state14) | ((icmp_ln89_fu_396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln89_1_reg_798 == 1'd1) & (icmp_ln90_fu_605_p2 == 1'd0) & (icmp_ln89_reg_739 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln90_fu_605_p2 == 1'd1) & (icmp_ln89_1_reg_798 == 1'd1) & (icmp_ln89_reg_739 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln89_reg_739 == 1'd0) & (1'b1 == ap_CS_fsm_state12)))) begin
        out_V_V_TDATA_blk_n = out_V_V_1_state[1'd1];
    end else begin
        out_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((in_V_V_0_vld_out == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln89_fu_396_p2 == 1'd1) & (1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((icmp_ln89_fu_396_p2 == 1'd0) & (1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (out_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (out_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (out_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (out_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (out_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (out_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (out_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if ((~((out_V_V_1_state == 2'd1) | (1'b1 == ap_block_state12_io) | ((out_V_V_1_state == 2'd3) & (out_V_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state12) & ((icmp_ln89_reg_739 == 1'd1) | (icmp_ln89_1_reg_798 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((out_V_V_1_state == 2'd1) | (1'b1 == ap_block_state12_io) | ((out_V_V_1_state == 2'd3) & (out_V_V_TREADY == 1'b0))) & (icmp_ln90_fu_605_p2 == 1'd1) & (icmp_ln89_1_reg_798 == 1'd1) & (icmp_ln89_reg_739 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if ((~((out_V_V_1_state == 2'd1) | (1'b1 == ap_block_state12_io) | ((out_V_V_1_state == 2'd3) & (out_V_V_TREADY == 1'b0))) & (icmp_ln89_1_reg_798 == 1'd1) & (icmp_ln90_fu_605_p2 == 1'd0) & (icmp_ln89_reg_739 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (out_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (out_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln89_1_fu_569_p2 = (i_reg2mem_1_reg_241 + 16'd1);

assign add_ln89_fu_546_p2 = (lmem_region_reg2mem_1_reg_201 + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((in_V_V_0_vld_out == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state12 = ((out_V_V_1_state == 2'd1) | ((out_V_V_1_state == 2'd3) & (out_V_V_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state12_io = (((out_V_V_1_ack_in == 1'b0) & (ap_predicate_op115_write_state12 == 1'b1)) | ((out_V_V_1_ack_in == 1'b0) & (ap_predicate_op114_write_state12 == 1'b1)) | ((icmp_ln89_reg_739 == 1'd0) & (out_V_V_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = ((icmp_ln89_fu_396_p2 == 1'd0) & (out_V_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_predicate_op114_write_state12 = ((icmp_ln89_1_reg_798 == 1'd1) & (icmp_ln90_fu_605_p2 == 1'd0) & (icmp_ln89_reg_739 == 1'd0));
end

always @ (*) begin
    ap_predicate_op115_write_state12 = ((icmp_ln90_fu_605_p2 == 1'd1) & (icmp_ln89_1_reg_798 == 1'd1) & (icmp_ln89_reg_739 == 1'd0));
end

assign fetch_bram_addr_base_V_1_fu_477_p2 = (ins_in_base_l_reg_668 + lmem_region_offset_0_reg2mem_1_reg_211);

assign fetch_bram_addr_base_V_fu_417_p2 = (ins_in_base_r_reg_673 + rmem_region_offset_0_reg2mem_0_reg_142);

assign fetch_dram_base_V_1_fu_582_p2 = (ins_in_dram_lhs_reg_684 + shl_ln1_fu_575_p3);

assign fetch_dram_base_V_fu_412_p2 = (ins_in_dram_rhs_reg_689 + shl_ln_fu_405_p3);

assign fetch_dram_block_count_V_fu_363_p1 = p_Result_4_i_reg_663;

assign icmp_ln127_fu_452_p2 = ((rmem_region_fu_441_p2 == lmem_num_regions_reg_711) ? 1'b1 : 1'b0);

assign icmp_ln168_fu_487_p2 = ((lmem_region_reg2mem_1_reg_201 == lmem_num_regions_reg_711) ? 1'b1 : 1'b0);

assign icmp_ln174_fu_506_p2 = ((m_fu_500_p2 == ins_in_tiles_m_reg_638) ? 1'b1 : 1'b0);

assign icmp_ln177_fu_517_p2 = ((n_fu_511_p2 == ins_in_tiles_n_reg_652) ? 1'b1 : 1'b0);

assign icmp_ln89_1_fu_564_p2 = ((zext_ln89_fu_560_p1 < mul_ln86_reg_694) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_396_p2 = ((mul_ln86_reg_694 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_605_p2 = ((select_ln174_1_reg_785 == 16'd0) ? 1'b1 : 1'b0);

assign in_V_V_0_ack_in = in_V_V_0_state[1'd1];

assign in_V_V_0_load_A = (in_V_V_0_state_cmp_full & ~in_V_V_0_sel_wr);

assign in_V_V_0_load_B = (in_V_V_0_state_cmp_full & in_V_V_0_sel_wr);

assign in_V_V_0_sel = in_V_V_0_sel_rd;

assign in_V_V_0_state_cmp_full = ((in_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_V_0_vld_in = in_V_V_TVALID;

assign in_V_V_0_vld_out = in_V_V_0_state[1'd0];

assign in_V_V_TREADY = in_V_V_0_state[1'd1];

assign ins_in_tiles_m_fu_251_p1 = in_V_V_0_data_out[15:0];

assign ins_in_tiles_n_fu_265_p4 = {{in_V_V_0_data_out[47:32]}};

assign lmem_num_regions_fu_366_p2 = 8'd1 << ins_in_nbufs_fetch_exec_log2_reg_678;

assign lmem_region_offset_fu_482_p2 = (lmem_region_offset_0_reg2mem_1_reg_211 + lmem_region_size_reg_717);

assign lmem_region_size_fu_380_p1 = lshr_ln71_fu_374_p2;

assign lshr_ln71_fu_374_p2 = 11'd1024 >> zext_ln71_fu_371_p1;

assign m_fu_500_p2 = (m_0_reg2mem_1_reg_231 + 16'd1);

assign mul_ln107_fu_628_p0 = zext_ln107_1_reg_728;

assign mul_ln107_fu_628_p1 = mul_ln107_fu_628_p10;

assign mul_ln107_fu_628_p10 = n_0_reg2mem_0_reg_119;

assign mul_ln148_fu_633_p0 = zext_ln107_1_reg_728;

assign mul_ln148_fu_633_p1 = mul_ln148_fu_633_p10;

assign mul_ln148_fu_633_p10 = m_0_reg2mem_1_reg_231;

assign mul_ln301_1_fu_622_p0 = zext_ln301_1_fu_387_p1;

assign mul_ln301_1_fu_622_p1 = mul_ln301_1_fu_622_p10;

assign mul_ln301_1_fu_622_p10 = ins_in_tiles_m_reg_638;

assign mul_ln301_fu_616_p0 = zext_ln301_1_fu_387_p1;

assign mul_ln301_fu_616_p1 = mul_ln301_fu_616_p10;

assign mul_ln301_fu_616_p10 = ins_in_tiles_n_reg_652;

assign mul_ln86_fu_610_p0 = mul_ln86_fu_610_p00;

assign mul_ln86_fu_610_p00 = ins_in_tiles_m_fu_251_p1;

assign mul_ln86_fu_610_p1 = mul_ln86_fu_610_p10;

assign mul_ln86_fu_610_p10 = ins_in_tiles_n_fu_265_p4;

assign n_fu_511_p2 = (n_0_reg2mem_1_reg_221 + 16'd1);

assign out_V_V_1_ack_in = out_V_V_1_state[1'd1];

assign out_V_V_1_ack_out = out_V_V_TREADY;

assign out_V_V_1_load_A = (out_V_V_1_state_cmp_full & ~out_V_V_1_sel_wr);

assign out_V_V_1_load_B = (out_V_V_1_state_cmp_full & out_V_V_1_sel_wr);

assign out_V_V_1_sel = out_V_V_1_sel_rd;

assign out_V_V_1_state_cmp_full = ((out_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_V_1_vld_out = out_V_V_1_state[1'd0];

assign out_V_V_TDATA = out_V_V_1_data_out;

assign out_V_V_TVALID = out_V_V_1_state[1'd0];

assign p_Result_1_fu_587_p10 = {{{{{{{{{fetch_tiles_per_row_V_reg_644}, {fetch_dram_block_count_V_1_reg_658}}, {mul_ln301_1_reg_734}}, {4'd0}}, {tmp_1_reg_700}}, {4'd0}}, {fetch_dram_base_V_1_fu_582_p2}}, {fetch_bram_addr_base_V_1_reg_768}}, {16'd4}};

assign p_Result_s_fu_422_p10 = {{{{{{{{{fetch_tiles_per_row_V_reg_644}, {fetch_dram_block_count_V_reg_706}}, {mul_ln301_reg_723}}, {4'd0}}, {tmp_1_reg_700}}, {4'd0}}, {fetch_dram_base_V_fu_412_p2}}, {fetch_bram_addr_base_V_fu_417_p2}}, {16'd32900}};

assign rmem_region_fu_441_p2 = (rmem_region_0_reg2mem_0_reg_131 + 8'd1);

assign rmem_region_offset_fu_447_p2 = (rmem_region_offset_0_reg2mem_0_reg_142 + lmem_region_size_reg_717);

assign select_ln127_1_fu_465_p3 = ((icmp_ln127_fu_452_p2[0:0] === 1'b1) ? 16'd0 : rmem_region_offset_fu_447_p2);

assign select_ln127_fu_457_p3 = ((icmp_ln127_fu_452_p2[0:0] === 1'b1) ? 8'd0 : rmem_region_fu_441_p2);

assign select_ln168_fu_492_p3 = ((icmp_ln168_fu_487_p2[0:0] === 1'b1) ? 16'd0 : lmem_region_offset_fu_482_p2);

assign select_ln174_1_fu_538_p3 = ((icmp_ln174_fu_506_p2[0:0] === 1'b1) ? 16'd0 : m_fu_500_p2);

assign select_ln174_fu_530_p3 = ((icmp_ln174_fu_506_p2[0:0] === 1'b1) ? select_ln177_fu_522_p3 : n_0_reg2mem_1_reg_221);

assign select_ln177_fu_522_p3 = ((icmp_ln177_fu_517_p2[0:0] === 1'b1) ? 16'd0 : n_fu_511_p2);

assign select_ln89_fu_552_p3 = ((icmp_ln168_fu_487_p2[0:0] === 1'b1) ? 8'd1 : add_ln89_fu_546_p2);

assign shl_ln1_fu_575_p3 = {{mul_ln148_reg_763}, {4'd0}};

assign shl_ln_fu_405_p3 = {{mul_ln107_reg_743}, {4'd0}};

assign zext_ln107_1_fu_390_p1 = fetch_tiles_per_row_V_reg_644;

assign zext_ln301_1_fu_387_p1 = fetch_tiles_per_row_V_reg_644;

assign zext_ln71_fu_371_p1 = ins_in_nbufs_fetch_exec_log2_reg_678;

assign zext_ln89_fu_560_p1 = i_reg2mem_1_reg_241;

always @ (posedge ap_clk) begin
    fetch_dram_block_count_V_reg_706[7:6] <= 2'b00;
    lmem_region_size_reg_717[15:11] <= 5'b00000;
    zext_ln107_1_reg_728[27:16] <= 12'b000000000000;
end

endmodule //FetchInstrGen_RHSLHSTiling_Templated_2ul_64ul_2ul_0ul_1024ul_1024ul_s
