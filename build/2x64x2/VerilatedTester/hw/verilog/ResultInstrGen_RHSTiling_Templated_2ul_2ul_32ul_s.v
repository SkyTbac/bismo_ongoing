// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ResultInstrGen_RHSTiling_Templated_2ul_2ul_32ul_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_V_TDATA,
        in_V_V_TVALID,
        in_V_V_TREADY,
        out_V_V_TDATA,
        out_V_V_TVALID,
        out_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [207:0] in_V_V_TDATA;
input   in_V_V_TVALID;
output   in_V_V_TREADY;
output  [127:0] out_V_V_TDATA;
output   out_V_V_TVALID;
input   out_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [207:0] in_V_V_0_data_out;
wire    in_V_V_0_vld_in;
wire    in_V_V_0_vld_out;
wire    in_V_V_0_ack_in;
reg    in_V_V_0_ack_out;
reg   [207:0] in_V_V_0_payload_A;
reg   [207:0] in_V_V_0_payload_B;
reg    in_V_V_0_sel_rd;
reg    in_V_V_0_sel_wr;
wire    in_V_V_0_sel;
wire    in_V_V_0_load_A;
wire    in_V_V_0_load_B;
reg   [1:0] in_V_V_0_state;
wire    in_V_V_0_state_cmp_full;
reg   [127:0] out_V_V_1_data_in;
reg   [127:0] out_V_V_1_data_out;
reg    out_V_V_1_vld_in;
wire    out_V_V_1_vld_out;
wire    out_V_V_1_ack_in;
wire    out_V_V_1_ack_out;
reg   [127:0] out_V_V_1_payload_A;
reg   [127:0] out_V_V_1_payload_B;
reg    out_V_V_1_sel_rd;
reg    out_V_V_1_sel_wr;
wire    out_V_V_1_sel;
wire    out_V_V_1_load_A;
wire    out_V_V_1_load_B;
reg   [1:0] out_V_V_1_state;
wire    out_V_V_1_state_cmp_full;
reg    in_V_V_TDATA_blk_n;
reg    out_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln78_fu_176_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state7;
reg   [0:0] icmp_ln78_1_reg_382;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state9;
reg   [0:0] icmp_ln78_reg_363;
wire   [15:0] ins_in_tiles_m_fu_137_p1;
reg   [15:0] ins_in_tiles_m_reg_331;
reg    ap_block_state1;
wire   [15:0] ins_in_tiles_n_fu_141_p4;
reg   [15:0] ins_in_tiles_n_reg_337;
reg   [31:0] ins_in_dram_res_reg_342;
wire   [12:0] trunc_ln304_fu_165_p1;
reg   [12:0] trunc_ln304_reg_347;
wire   [31:0] mul_ln78_fu_320_p2;
reg   [31:0] mul_ln78_reg_352;
wire   [27:0] zext_ln90_1_fu_173_p1;
reg   [27:0] zext_ln90_1_reg_358;
reg    ap_block_state2_io;
wire   [27:0] mul_ln90_fu_326_p2;
reg   [27:0] mul_ln90_reg_367;
wire    ap_CS_fsm_state4;
wire   [15:0] select_ln112_fu_215_p3;
reg   [15:0] select_ln112_reg_372;
wire   [15:0] select_ln112_1_fu_223_p3;
reg   [15:0] select_ln112_1_reg_377;
wire   [0:0] icmp_ln78_1_fu_231_p2;
wire   [31:0] add_ln78_fu_236_p2;
reg   [31:0] add_ln78_reg_386;
wire   [127:0] p_Result_s_fu_284_p7;
wire   [7:0] select_ln101_fu_312_p3;
reg   [7:0] select_ln101_reg_396;
reg   [15:0] m_0_reg2mem_0_reg_92;
reg   [15:0] n_0_reg2mem_0_reg_104;
reg   [31:0] i_reg2mem_0_reg_115;
reg   [7:0] val_assign_reg2mem_0_reg_126;
reg    ap_block_state7_io;
wire   [15:0] m_fu_185_p2;
wire   [15:0] n_fu_196_p2;
wire   [0:0] icmp_ln115_fu_202_p2;
wire   [0:0] icmp_ln112_fu_191_p2;
wire   [15:0] select_ln115_fu_207_p3;
wire   [16:0] shl_ln_fu_242_p3;
wire   [29:0] zext_ln90_2_fu_250_p1;
wire   [29:0] shl_ln90_1_fu_254_p3;
wire   [29:0] add_ln90_fu_261_p2;
wire   [31:0] shl_ln90_2_fu_267_p3;
wire   [31:0] res_dram_base_V_fu_275_p2;
wire   [0:0] res_resmem_addr_V_fu_280_p1;
wire   [7:0] offset_res_fu_300_p2;
wire   [0:0] icmp_ln101_fu_306_p2;
wire   [15:0] mul_ln78_fu_320_p0;
wire   [15:0] mul_ln78_fu_320_p1;
wire   [15:0] mul_ln90_fu_326_p0;
wire   [15:0] mul_ln90_fu_326_p1;
reg    ap_block_state9;
reg    ap_block_state9_io;
reg   [9:0] ap_NS_fsm;
wire   [31:0] mul_ln78_fu_320_p00;
wire   [31:0] mul_ln78_fu_320_p10;
wire   [27:0] mul_ln90_fu_326_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 in_V_V_0_sel_rd = 1'b0;
#0 in_V_V_0_sel_wr = 1'b0;
#0 in_V_V_0_state = 2'd0;
#0 out_V_V_1_sel_rd = 1'b0;
#0 out_V_V_1_sel_wr = 1'b0;
#0 out_V_V_1_state = 2'd0;
end

ResultInstrGen_mul_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
ResultInstrGen_mul_mul_16ns_16ns_32_1_1_U1(
    .din0(mul_ln78_fu_320_p0),
    .din1(mul_ln78_fu_320_p1),
    .dout(mul_ln78_fu_320_p2)
);

ResultInstrGen_mul_mul_16ns_16ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 28 ))
ResultInstrGen_mul_mul_16ns_16ns_28_1_1_U2(
    .din0(mul_ln90_fu_326_p0),
    .din1(mul_ln90_fu_326_p1),
    .dout(mul_ln90_fu_326_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_V_0_ack_out == 1'b1) & (in_V_V_0_vld_out == 1'b1))) begin
            in_V_V_0_sel_rd <= ~in_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_V_0_ack_in == 1'b1) & (in_V_V_0_vld_in == 1'b1))) begin
            in_V_V_0_sel_wr <= ~in_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_V_0_state == 2'd2) & (in_V_V_0_vld_in == 1'b0)) | ((in_V_V_0_state == 2'd3) & (in_V_V_0_vld_in == 1'b0) & (in_V_V_0_ack_out == 1'b1)))) begin
            in_V_V_0_state <= 2'd2;
        end else if ((((in_V_V_0_state == 2'd1) & (in_V_V_0_ack_out == 1'b0)) | ((in_V_V_0_state == 2'd3) & (in_V_V_0_ack_out == 1'b0) & (in_V_V_0_vld_in == 1'b1)))) begin
            in_V_V_0_state <= 2'd1;
        end else if (((~((in_V_V_0_vld_in == 1'b0) & (in_V_V_0_ack_out == 1'b1)) & ~((in_V_V_0_ack_out == 1'b0) & (in_V_V_0_vld_in == 1'b1)) & (in_V_V_0_state == 2'd3)) | ((in_V_V_0_state == 2'd1) & (in_V_V_0_ack_out == 1'b1)) | ((in_V_V_0_state == 2'd2) & (in_V_V_0_vld_in == 1'b1)))) begin
            in_V_V_0_state <= 2'd3;
        end else begin
            in_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_V_1_ack_out == 1'b1) & (out_V_V_1_vld_out == 1'b1))) begin
            out_V_V_1_sel_rd <= ~out_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_V_1_ack_in == 1'b1) & (out_V_V_1_vld_in == 1'b1))) begin
            out_V_V_1_sel_wr <= ~out_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_V_1_state == 2'd2) & (out_V_V_1_vld_in == 1'b0)) | ((out_V_V_1_state == 2'd3) & (out_V_V_1_vld_in == 1'b0) & (out_V_V_1_ack_out == 1'b1)))) begin
            out_V_V_1_state <= 2'd2;
        end else if ((((out_V_V_1_state == 2'd1) & (out_V_V_TREADY == 1'b0)) | ((out_V_V_1_state == 2'd3) & (out_V_V_TREADY == 1'b0) & (out_V_V_1_vld_in == 1'b1)))) begin
            out_V_V_1_state <= 2'd1;
        end else if (((~((out_V_V_1_vld_in == 1'b0) & (out_V_V_1_ack_out == 1'b1)) & ~((out_V_V_TREADY == 1'b0) & (out_V_V_1_vld_in == 1'b1)) & (out_V_V_1_state == 2'd3)) | ((out_V_V_1_state == 2'd1) & (out_V_V_1_ack_out == 1'b1)) | ((out_V_V_1_state == 2'd2) & (out_V_V_1_vld_in == 1'b1)))) begin
            out_V_V_1_state <= 2'd3;
        end else begin
            out_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_ack_in == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            i_reg2mem_0_reg_115 <= add_ln78_reg_386;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            i_reg2mem_0_reg_115 <= 32'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_ack_in == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            m_0_reg2mem_0_reg_92 <= select_ln112_reg_372;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_0_reg2mem_0_reg_92 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_ack_in == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            n_0_reg2mem_0_reg_104 <= select_ln112_1_reg_377;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            n_0_reg2mem_0_reg_104 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_ack_in == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            val_assign_reg2mem_0_reg_126 <= select_ln101_reg_396;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            val_assign_reg2mem_0_reg_126 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln78_reg_386 <= add_ln78_fu_236_p2;
        icmp_ln78_1_reg_382 <= icmp_ln78_1_fu_231_p2;
        mul_ln90_reg_367 <= mul_ln90_fu_326_p2;
        select_ln112_1_reg_377 <= select_ln112_1_fu_223_p3;
        select_ln112_reg_372 <= select_ln112_fu_215_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln78_reg_363 <= icmp_ln78_fu_176_p2;
        zext_ln90_1_reg_358[15 : 0] <= zext_ln90_1_fu_173_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_V_0_load_A == 1'b1)) begin
        in_V_V_0_payload_A <= in_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_V_0_load_B == 1'b1)) begin
        in_V_V_0_payload_B <= in_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_V_V_0_vld_out == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ins_in_dram_res_reg_342 <= {{in_V_V_0_data_out[207:176]}};
        ins_in_tiles_m_reg_331 <= ins_in_tiles_m_fu_137_p1;
        ins_in_tiles_n_reg_337 <= {{in_V_V_0_data_out[47:32]}};
        mul_ln78_reg_352 <= mul_ln78_fu_320_p2;
        trunc_ln304_reg_347 <= trunc_ln304_fu_165_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_load_A == 1'b1)) begin
        out_V_V_1_payload_A <= out_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_V_1_load_B == 1'b1)) begin
        out_V_V_1_payload_B <= out_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (out_V_V_1_ack_in == 1'b1))) begin
        select_ln101_reg_396 <= select_ln101_fu_312_p3;
    end
end

always @ (*) begin
    if (((~((out_V_V_1_state == 2'd1) | (1'b1 == ap_block_state9_io) | ((out_V_V_1_state == 2'd3) & (out_V_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state9)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_V_V_1_state == 2'd1) | (1'b1 == ap_block_state9_io) | ((out_V_V_1_state == 2'd3) & (out_V_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((in_V_V_0_vld_out == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_V_V_0_ack_out = 1'b1;
    end else begin
        in_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_V_V_0_sel == 1'b1)) begin
        in_V_V_0_data_out = in_V_V_0_payload_B;
    end else begin
        in_V_V_0_data_out = in_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        in_V_V_TDATA_blk_n = in_V_V_0_state[1'd0];
    end else begin
        in_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_V_V_1_data_in = 128'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_V_V_1_data_in = p_Result_s_fu_284_p7;
    end else if ((((icmp_ln78_1_reg_382 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln78_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_V_V_1_data_in = 128'd5192296858534832240216514756608006;
    end else if ((((icmp_ln78_1_reg_382 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln78_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_V_V_1_data_in = 128'd2;
    end else begin
        out_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((out_V_V_1_sel == 1'b1)) begin
        out_V_V_1_data_out = out_V_V_1_payload_B;
    end else begin
        out_V_V_1_data_out = out_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (out_V_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & (out_V_V_1_ack_in == 1'b1)) | ((icmp_ln78_1_reg_382 == 1'd1) & (1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln78_1_reg_382 == 1'd0) & (1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln78_fu_176_p2 == 1'd1) & (1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln78_fu_176_p2 == 1'd0) & (1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_V_V_1_vld_in = 1'b1;
    end else begin
        out_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln78_reg_363 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln78_1_reg_382 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln78_1_reg_382 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln78_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln78_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_V_V_TDATA_blk_n = out_V_V_1_state[1'd1];
    end else begin
        out_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((in_V_V_0_vld_out == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln78_fu_176_p2 == 1'd1) & (1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((icmp_ln78_fu_176_p2 == 1'd0) & (1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (out_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (out_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (out_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln78_1_reg_382 == 1'd1) & (1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((icmp_ln78_1_reg_382 == 1'd0) & (1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (out_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if ((~((out_V_V_1_state == 2'd1) | (1'b1 == ap_block_state9_io) | ((out_V_V_1_state == 2'd3) & (out_V_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (out_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_236_p2 = (32'd1 + i_reg2mem_0_reg_115);

assign add_ln90_fu_261_p2 = (zext_ln90_2_fu_250_p1 + shl_ln90_1_fu_254_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((in_V_V_0_vld_out == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = (((icmp_ln78_fu_176_p2 == 1'd1) & (out_V_V_1_ack_in == 1'b0)) | ((icmp_ln78_fu_176_p2 == 1'd0) & (out_V_V_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_state7_io = ((out_V_V_1_ack_in == 1'b0) | ((icmp_ln78_1_reg_382 == 1'd1) & (out_V_V_1_ack_in == 1'b0)) | ((icmp_ln78_1_reg_382 == 1'd0) & (out_V_V_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_state9 = ((out_V_V_1_state == 2'd1) | ((out_V_V_1_state == 2'd3) & (out_V_V_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state9_io = ((icmp_ln78_reg_363 == 1'd0) & (out_V_V_1_ack_in == 1'b0));
end

assign icmp_ln101_fu_306_p2 = ((offset_res_fu_300_p2 == 8'd2) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_191_p2 = ((m_fu_185_p2 == ins_in_tiles_m_reg_331) ? 1'b1 : 1'b0);

assign icmp_ln115_fu_202_p2 = ((n_fu_196_p2 == ins_in_tiles_n_reg_337) ? 1'b1 : 1'b0);

assign icmp_ln78_1_fu_231_p2 = ((i_reg2mem_0_reg_115 == mul_ln78_reg_352) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_176_p2 = ((mul_ln78_reg_352 == 32'd0) ? 1'b1 : 1'b0);

assign in_V_V_0_ack_in = in_V_V_0_state[1'd1];

assign in_V_V_0_load_A = (in_V_V_0_state_cmp_full & ~in_V_V_0_sel_wr);

assign in_V_V_0_load_B = (in_V_V_0_state_cmp_full & in_V_V_0_sel_wr);

assign in_V_V_0_sel = in_V_V_0_sel_rd;

assign in_V_V_0_state_cmp_full = ((in_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_V_0_vld_in = in_V_V_TVALID;

assign in_V_V_0_vld_out = in_V_V_0_state[1'd0];

assign in_V_V_TREADY = in_V_V_0_state[1'd1];

assign ins_in_tiles_m_fu_137_p1 = in_V_V_0_data_out[15:0];

assign ins_in_tiles_n_fu_141_p4 = {{in_V_V_0_data_out[47:32]}};

assign m_fu_185_p2 = (16'd1 + m_0_reg2mem_0_reg_92);

assign mul_ln78_fu_320_p0 = mul_ln78_fu_320_p00;

assign mul_ln78_fu_320_p00 = ins_in_tiles_n_fu_141_p4;

assign mul_ln78_fu_320_p1 = mul_ln78_fu_320_p10;

assign mul_ln78_fu_320_p10 = ins_in_tiles_m_fu_137_p1;

assign mul_ln90_fu_326_p0 = mul_ln90_fu_326_p00;

assign mul_ln90_fu_326_p00 = n_0_reg2mem_0_reg_104;

assign mul_ln90_fu_326_p1 = zext_ln90_1_reg_358;

assign n_fu_196_p2 = (16'd1 + n_0_reg2mem_0_reg_104);

assign offset_res_fu_300_p2 = (8'd1 + val_assign_reg2mem_0_reg_126);

assign out_V_V_1_ack_in = out_V_V_1_state[1'd1];

assign out_V_V_1_ack_out = out_V_V_TREADY;

assign out_V_V_1_load_A = (out_V_V_1_state_cmp_full & ~out_V_V_1_sel_wr);

assign out_V_V_1_load_B = (out_V_V_1_state_cmp_full & out_V_V_1_sel_wr);

assign out_V_V_1_sel = out_V_V_1_sel_rd;

assign out_V_V_1_state_cmp_full = ((out_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_V_1_vld_out = out_V_V_1_state[1'd0];

assign out_V_V_TDATA = out_V_V_1_data_out;

assign out_V_V_TVALID = out_V_V_1_state[1'd0];

assign p_Result_s_fu_284_p7 = {{{{{{{{{{16'd0}, {trunc_ln304_reg_347}}}, {3'd0}}}, {res_dram_base_V_fu_275_p2}}}, {res_resmem_addr_V_fu_280_p1}}}, {63'd6}};

assign res_dram_base_V_fu_275_p2 = (ins_in_dram_res_reg_342 + shl_ln90_2_fu_267_p3);

assign res_resmem_addr_V_fu_280_p1 = val_assign_reg2mem_0_reg_126[0:0];

assign select_ln101_fu_312_p3 = ((icmp_ln101_fu_306_p2[0:0] === 1'b1) ? 8'd0 : offset_res_fu_300_p2);

assign select_ln112_1_fu_223_p3 = ((icmp_ln112_fu_191_p2[0:0] === 1'b1) ? select_ln115_fu_207_p3 : n_0_reg2mem_0_reg_104);

assign select_ln112_fu_215_p3 = ((icmp_ln112_fu_191_p2[0:0] === 1'b1) ? 16'd0 : m_fu_185_p2);

assign select_ln115_fu_207_p3 = ((icmp_ln115_fu_202_p2[0:0] === 1'b1) ? 16'd0 : n_fu_196_p2);

assign shl_ln90_1_fu_254_p3 = {{mul_ln90_reg_367}, {2'd0}};

assign shl_ln90_2_fu_267_p3 = {{add_ln90_fu_261_p2}, {2'd0}};

assign shl_ln_fu_242_p3 = {{m_0_reg2mem_0_reg_92}, {1'd0}};

assign trunc_ln304_fu_165_p1 = in_V_V_0_data_out[12:0];

assign zext_ln90_1_fu_173_p1 = ins_in_tiles_m_reg_331;

assign zext_ln90_2_fu_250_p1 = shl_ln_fu_242_p3;

always @ (posedge ap_clk) begin
    zext_ln90_1_reg_358[27:16] <= 12'b000000000000;
end

endmodule //ResultInstrGen_RHSTiling_Templated_2ul_2ul_32ul_s
